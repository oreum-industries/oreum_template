[project]
name = "oreum_template"
version = "1.1.0"
description = "Oreum Industries Template Project Structure"
readme = "README.md"
license = {file = "LICENSE.md"}
authors = [{ name = "Jonathan Sedar", email = "jonathan.sedar@oreum.io" },]
requires-python = "==3.11.*"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: Other/Proprietary License",
    "Natural Language :: English",
    "Operating System :: MacOS",
    "Operating System :: Unix",
    "Private :: Do Not Upload",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Visualization",
]
dependencies = [
    "ipywidgets",
    "jupyterlab",
    "pyprojroot",
    "watermark",
]

[project.optional-dependencies]
dev = [
    "bandit",
    "hypothesis",
    "interrogate",
    "pipdeptree",
    "pip-licenses",
    "pre-commit",
    "pytest",
    "ruff",
    "sqlfluff"
]
# NOTE: separated out to allow Makefile dev to get from pypi (dev-js gets local)
oreum_core_pypi = [
    "oreum_core[pymc]>=0.9.9",  # the latest package using osx-arm64 Accelerate
]

[project.urls]
homepage = "https://github.com/oreum-industries/oreum_template"

[tool.bandit]
exclude_dirs = ["notebooks"]
skips = ["B101"]  # skip asserts
# tests = ["B201", "B301"]  # run all tests

[tool.interrogate]
ignore-init-method = false
ignore-init-module = true  # doesnt work with precommit see https://github.com/econchick/interrogate/issues/100
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 80
exclude = ["assets", "build", "dev", "notebooks"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 1
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false
generate-badge = "assets/img/"
badge-format = "svg"
badge-style = "flat"

[tool.ruff]  # settings: https://docs.astral.sh/ruff/settings/
indent-width = 4
line-length = 88
target-version = "py311"
extend-exclude = [
    "__pycache__",
    "build",
    "dev",
    "lib",
    "lib64",
    "sdist",
    "var",
    "wheels",
]

[tool.ruff.lint]
# fixable = ["ALL"]  # allow fix for all enabled rules (when `--fix`) provided
unfixable = ["B"]
# allow unused underscore-prefix vars
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# exclude = ["*.ipynb"]  # commented to _allow_ lint notebooks (useful)

select = [
    "B",  # flake8-bugbear
    "C",  # flake8-comprehensions
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "W",  # pycodestyle warnings
    "B9", # legacy from .flake8 config
]
ignore = [
    "B026",  # let me do star unpacking
    "C405",  # let me use set()
    "C408",  # let me use dict()
    "C416",  # let me use list comprehensions
    "C419",  # let me use list comprehensions
    "C901",  # too complex
    "E203",  # legacy from .flake8 config
    "E266",  # legacy from .flake8 config
    "E501",  # line too long
    "E712",  # legacy from .flake8 config
    "F401",  # legacy from .flake8 config
    "F403",  # legacy from .flake8 config
    "W291",  # legacy from .flake8 config
    "W293",  # legacy from .flake8 config
    "W605",  # legacy from .flake8 config
]

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = ["E402"]
"config_slides.py" = ["F821"]
"config_pdf.py" = ["F821"]

[tool.ruff.format]
indent-style = "space"
line-ending = "auto"
quote-style = "double"
skip-magic-trailing-comma = true
exclude = ["*.ipynb"]

[tool.ruff.lint.isort]
order-by-type = true
relative-imports-order = "closest-to-furthest"
extra-standard-library = ["typing"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = []
split-on-trailing-comma=false
